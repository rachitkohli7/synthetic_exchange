diff --git a/package.json b/package.json
index de14ee03..e68ac7e7 100644
--- a/package.json
+++ b/package.json
@@ -32,7 +32,7 @@
 		"react-redux": "7.2.0",
 		"react-responsive": "8.0.3",
 		"react-router-dom": "5.1.2",
-		"react-scripts": "3.4.1",
+		"react-scripts": "^3.4.3",
 		"react-select": "^3.0.8",
 		"react-table": "7.0.4",
 		"recharts": "^2.0.0-beta.1",
@@ -81,7 +81,9 @@
 	},
 	"scripts": {
 		"start": "REACT_APP_VERSION=$npm_package_version react-scripts --max-old-space-size=4096 start",
+		"start_windows": "set REACT_APP_VERSION=$npm_package_version && react-scripts --max-old-space-size=4096 start",
 		"build": "REACT_APP_VERSION=$npm_package_version react-scripts --max-old-space-size=4096 build",
+		"build_windows": "set REACT_APP_VERSION=$npm_package_version && react-scripts --max-old-space-size=4096 build",
 		"test": "react-scripts test",
 		"eject": "react-scripts eject",
 		"tsc": "tsc --noemit",
@@ -95,6 +97,7 @@
 		"extends": "react-app"
 	},
 	"browserslist": {
+
 		"production": [
 			">0.2%",
 			"not dead",
diff --git a/src/components/Button/index.js b/src/components/Button/index.js
index dcdf8e2d..58b7e63e 100644
--- a/src/components/Button/index.js
+++ b/src/components/Button/index.js
@@ -1,11 +1,14 @@
 import { ButtonFilter, ButtonFilterWithDropdown } from './ButtonFilter';
 import ButtonPrimary, { ButtonPrimarySmall } from './ButtonPrimary';
+import ButtonOutlined, { ButtonOutlinedSmall } from './ButtonOutlined';
 import ButtonSort from './ButtonSort';
 import Button from './Button';
 
 export {
 	ButtonFilter,
 	ButtonPrimary,
+	ButtonOutlined,
+	ButtonOutlinedSmall,
 	ButtonPrimarySmall,
 	ButtonFilterWithDropdown,
 	ButtonSort,
diff --git a/src/components/Currency/CurrencyPair/CurrencyPair.tsx b/src/components/Currency/CurrencyPair/CurrencyPair.tsx
index bbd4c5b4..4768b637 100644
--- a/src/components/Currency/CurrencyPair/CurrencyPair.tsx
+++ b/src/components/Currency/CurrencyPair/CurrencyPair.tsx
@@ -11,6 +11,7 @@ type CurrencyPairProps = {
 	baseCurrencyKey: CurrencyKey;
 	baseCurrencyAsset?: string;
 	quoteCurrencyKey: CurrencyKey;
+	quoteCurrencyAsset?: string;
 	showIcon?: boolean;
 	iconProps?: any;
 };
@@ -19,13 +20,15 @@ export const CurrencyPair: FC<CurrencyPairProps> = ({
 	baseCurrencyKey,
 	baseCurrencyAsset,
 	quoteCurrencyKey,
+	quoteCurrencyAsset,
 	showIcon = true,
 	iconProps = {},
 	...rest
 }) => (
 	<Container showIcon={showIcon} {...rest}>
 		{showIcon && <CurrencyIcon currencyKey={baseCurrencyKey} {...iconProps} />}
-		{formatCurrencyPair(baseCurrencyAsset || baseCurrencyKey, quoteCurrencyKey)}
+		{/*formatCurrencyPair(baseCurrencyAsset || baseCurrencyKey, quoteCurrencyKey)*/}
+		{formatCurrencyPair(baseCurrencyAsset || baseCurrencyKey, quoteCurrencyAsset || quoteCurrencyKey)}
 	</Container>
 );
 
diff --git a/src/components/Input/NumericInputWithCurrency.tsx b/src/components/Input/NumericInputWithCurrency.tsx
index 0c0a4b9c..71f89091 100644
--- a/src/components/Input/NumericInputWithCurrency.tsx
+++ b/src/components/Input/NumericInputWithCurrency.tsx
@@ -2,7 +2,7 @@ import React, { FC } from 'react';
 import styled, { css } from 'styled-components';
 import { useTranslation } from 'react-i18next';
 
-import { SYNTHS_MAP, CurrencyKey } from 'constants/currency';
+import { SYNTHS_MAP, CurrencyKey, SYNTHS_DISPLAY_NAMES } from 'constants/currency';
 
 import { FlexDivCentered, Message } from 'shared/commonStyles';
 
@@ -44,7 +44,7 @@ const TradeInput: FC<NumericInputWithCurrencyProps> = ({
 			{label != null && <Label>{label}</Label>}
 			<Container className={className}>
 				<CurrencyContainer className="currency-container">
-					<StyledCurrencyName currencyKey={currencyKey} showIcon={showIcon} />
+					<StyledCurrencyName name={SYNTHS_DISPLAY_NAMES[currencyKey]} currencyKey={currencyKey} showIcon={showIcon} />
 				</CurrencyContainer>
 				<StyledNumericInput
 					className="input"
diff --git a/src/constants/currency.ts b/src/constants/currency.ts
index ae7a2a2b..978d0bae 100644
--- a/src/constants/currency.ts
+++ b/src/constants/currency.ts
@@ -91,6 +91,8 @@ import { ReactComponent as sCHFIcon } from '@synthetixio/assets/synths/sCHF.svg'
 
 export type CurrencyKey = string;
 export type CurrencyKeys = string[];
+export type CryptoKey = string;
+export type CryptoKeys = string[];
 
 // TODO: standardize this
 export type Category = 'crypto' | 'forex' | 'equities' | 'index' | 'commodity' | 'inverse';
@@ -151,6 +153,51 @@ export const SYNTHS = [
 	'iDEFI',
 ];
 
+export const SYNTHS_DISPLAY_NAMES: {[key: string]: CryptoKey} = {
+	'sBTC': 'BTC',
+	'sETH': 'ETH',
+	'sXRP': 'XRP',
+	'sBCH': 'BCH',
+	'sLTC': 'LTC',
+	'sEOS': 'EOS',
+	'sBNB': 'BNB',
+	'sXTZ': 'XTZ',
+	'sXMR': 'XMR',
+	'sADA': 'ADA',
+	'sLINK': 'LINK',
+	'sTRX': 'TRX',
+	'sDASH': 'DASH',
+	'sETC': 'ETC',
+	'iBTC': 'BTC',
+	'iETH': 'ETH',
+	'iXRP': 'XRP',
+	'iBCH': 'BCH',
+	'iLTC': 'LTC',
+	'iEOS': 'EOS',
+	'iBNB': 'BNB',
+	'iXTZ': 'XTZ',
+	'iXMR': 'XMR',
+	'iADA': 'ADA',
+	'iLINK': 'LINK',
+	'iTRX': 'TRX',
+	'iDASH': 'DASH',
+	'iETC': 'ETC',
+	'sFTSE': 'FTSE',
+	'sNIKKEI': 'NIKKEI',
+	'sXAU': 'XAU',
+	'sXAG': 'XAG',
+	'sEUR': 'EUR',
+	'sJPY': 'JPY',
+	'sUSD': 'USD',
+	'sAUD': 'AUD',
+	'sGBP': 'GBP',
+	'sCHF': 'CHF',
+	'sCEX': 'CEX',
+	'sDEFI': 'DEFI',
+	'iCEX': 'CEX',
+	'iDEFI': 'DEFI',
+};
+
 export const SYNTHS_MAP = keyBy(SYNTHS);
 
 export const CRYPTO_CURRENCY = [
@@ -175,6 +222,8 @@ export const CRYPTO_CURRENCY = [
 	'ETC',
 ];
 
+export const CRYPTO_MAP = keyBy(CRYPTO_CURRENCY);
+
 export const CRYPTO_CURRENCY_MAP = keyBy(CRYPTO_CURRENCY);
 
 export const FIAT_CURRENCY = ['USD', 'AUD'];
diff --git a/src/constants/order.ts b/src/constants/order.ts
index f97770e4..0fa876bc 100644
--- a/src/constants/order.ts
+++ b/src/constants/order.ts
@@ -1 +1,8 @@
 export const BALANCE_FRACTIONS = [25, 50, 75, 100];
+export const LIMIT = 'limit';
+export const MARKET = 'market';
+export const STOP_LIMIT = 'stop-limit';
+export const TRADE_TYPES = [LIMIT, MARKET, STOP_LIMIT];
+export const BUY = 'Buy';
+export const SELL = 'Sell';
+export const TRANSACTION_TYPES = [BUY, SELL];
diff --git a/src/constants/routes.ts b/src/constants/routes.ts
index 462a4018..fca5ac32 100644
--- a/src/constants/routes.ts
+++ b/src/constants/routes.ts
@@ -2,9 +2,9 @@ import history from '../utils/history';
 import { CurrencyKey } from './currency';
 
 export const ROUTES = {
-	Home: '/',
-	Trade: '/trade',
-	TradeMatch: '/trade/:baseCurrencyKey-:quoteCurrencyKey',
+	Home: '/home',
+	Trade: '/',
+	TradeMatch: '/:baseCurrencyKey-:quoteCurrencyKey',
 	Loans: '/loans',
 	Assets: {
 		Home: '/assets',
@@ -35,8 +35,9 @@ export const buildSynthOverviewLink = (currencyKey: CurrencyKey) =>
 	`${ROUTES.Synths.Home}/${currencyKey}`;
 
 export const buildTradeLink = (baseCurrencyKey: CurrencyKey, quoteCurrencyKey: CurrencyKey) =>
-	`${ROUTES.Trade}/${baseCurrencyKey}-${quoteCurrencyKey}`;
-
+	//`${ROUTES.Trade}/${baseCurrencyKey}-${quoteCurrencyKey}`;
+	`/${baseCurrencyKey}-${quoteCurrencyKey}`;
+// The above change is made to accommodate the routing related changes.
 export const navigateTo = (
 	path: string,
 	replacePath: boolean = false,
diff --git a/src/ducks/rates.ts b/src/ducks/rates.ts
index da087466..26bf750f 100644
--- a/src/ducks/rates.ts
+++ b/src/ducks/rates.ts
@@ -3,7 +3,7 @@ import get from 'lodash/get';
 
 import snxJSConnector from '../utils/snxJSConnector';
 import { bigNumberFormatter, parseBytes32String } from '../utils/formatters';
-import { SYNTHS_MAP, CurrencyKey } from '../constants/currency';
+import { SYNTHS_MAP, CurrencyKey, SYNTHS_DISPLAY_NAMES } from '../constants/currency';
 import { RootState } from './types';
 import { takeLatest, put } from 'redux-saga/effects';
 
@@ -83,11 +83,17 @@ function* fetchRates() {
 
 	try {
 		let exchangeRates: Rates = {};
-
+		
+		//const marketPrice = yield getMarketPrice();
 		const [synths, rates] = yield synthSummaryUtilContract.synthsRates();
 		synths.forEach((synth: CurrencyKey, idx: number) => {
 			const synthName = parseBytes32String(synth);
+			//const coinName = SYNTHS_DISPLAY_NAMES[synthName].toLowerCase();
+			/* if (false && marketPrice[coinName]) {
+				exchangeRates[synthName] = 1 / marketPrice[coinName];
+			} else { */
 			exchangeRates[synthName] = bigNumberFormatter(rates[idx]);
+			//}
 		});
 
 		yield put(fetchRatesSuccess({ exchangeRates }));
@@ -96,6 +102,13 @@ function* fetchRates() {
 	}
 }
 
+async function getMarketPrice(): Promise<any> {
+	const res = await fetch("https://api.coingecko.com/api/v3/coins/universal-us-dollar");
+	const result = await res.json();
+	const priceList = result.market_data.current_price;
+	return priceList;
+}
+
 export function* watchFetchRatesRequest() {
 	yield takeLatest(fetchRatesRequest.type, fetchRates);
 }
diff --git a/src/ducks/synths.ts b/src/ducks/synths.ts
index 6751930d..868d5167 100644
--- a/src/ducks/synths.ts
+++ b/src/ducks/synths.ts
@@ -19,6 +19,7 @@ import { getSynthsCategoryFilter } from './ui';
 
 export type SynthDefinition = {
 	name: CurrencyKey;
+	displayName: string;
 	asset: string;
 	category: Category;
 	sign: string;
diff --git a/src/pages/Root/App.tsx b/src/pages/Root/App.tsx
index aae62f11..6ca79876 100644
--- a/src/pages/Root/App.tsx
+++ b/src/pages/Root/App.tsx
@@ -44,8 +44,9 @@ type AppProps = PropsFromRedux & {
 };
 
 const App: FC<AppProps> = ({ isAppReady, currentTheme, isSystemSuspended }) => {
-	const themeStyle = isDarkTheme(currentTheme) ? darkTheme : lightTheme;
-
+	//const themeStyle = isDarkTheme(currentTheme) ? darkTheme : lightTheme;
+	const themeStyle = darkTheme;
+	
 	return (
 		<ThemeProvider theme={themeStyle}>
 			<MaterialUIThemeProvider>
diff --git a/src/pages/Root/components/AppHeader/AppHeader.tsx b/src/pages/Root/components/AppHeader/AppHeader.tsx
index b0b90521..8813ffc0 100644
--- a/src/pages/Root/components/AppHeader/AppHeader.tsx
+++ b/src/pages/Root/components/AppHeader/AppHeader.tsx
@@ -58,7 +58,7 @@ export const AppHeader: FC<AppHeaderProps> = (props) => {
 							<Logo />
 						</StyledLogoLink>
 					</MenuItem>
-					{MENU_LINKS.map(({ i18nLabel, link, isBeta }) => (
+					{/*MENU_LINKS.map(({ i18nLabel, link, isBeta }) => (
 						<MenuLinkItem key={link}>
 							<MenuLink to={link}>
 								{t(i18nLabel)} {isBeta && <BetaLabel>{t('common.beta')}</BetaLabel>}
@@ -70,17 +70,17 @@ export const AppHeader: FC<AppHeaderProps> = (props) => {
 							<MenuLinkItem key={link}>
 								<MenuLink to={link}>{t(i18nLabel)}</MenuLink>
 							</MenuLinkItem>
-						))}
+						))}*/}
 				</MenuItemsLeft>
 				<MenuItemsRight>
-					<MenuItem>
+					{/* <MenuItem>
 						<SupportLink isOnSplashPage={isOnSplashPage} />
-					</MenuItem>
-					{showThemeToggle && (
+					</MenuItem> */}
+					{/*showThemeToggle && (
 						<MenuItem>
 							<ThemeToggle />
 						</MenuItem>
-					)}
+					)*/}
 					<MenuItem>
 						<UserInfo isOnSplashPage={isOnSplashPage} />
 					</MenuItem>
diff --git a/src/pages/Root/components/AppHeader/MobileAppHeader/MobileAppHeader.tsx b/src/pages/Root/components/AppHeader/MobileAppHeader/MobileAppHeader.tsx
index 2debd9cc..e10f7178 100644
--- a/src/pages/Root/components/AppHeader/MobileAppHeader/MobileAppHeader.tsx
+++ b/src/pages/Root/components/AppHeader/MobileAppHeader/MobileAppHeader.tsx
@@ -70,16 +70,16 @@ export const MobileAppHeader: FC<MobileAppHeaderProps> = ({
 						<MenuItem>
 							<UserInfo isOnSplashPage={isOnSplashPage} />
 						</MenuItem>
-						<MenuItem>
+						{/* <MenuItem>
 							<MenuToggleButton onClick={toggleMenu}>
 								{menuOpen ? <MenuCloseIcon /> : <MenuHamburgerIcon />}
 							</MenuToggleButton>
-						</MenuItem>
+						</MenuItem> */}
 					</MenuItemsRight>
 				</Content>
 			</Container>
-			<MenuPusher />
-			{menuOpen && (
+			{/*<MenuPusher />
+			 {menuOpen && (
 				<>
 					<Overlay onClick={toggleMenu} />
 					<StyledDropdown isOnSplashPage={isOnSplashPage}>
@@ -110,7 +110,7 @@ export const MobileAppHeader: FC<MobileAppHeaderProps> = ({
 						)}
 					</StyledDropdown>
 				</>
-			)}
+			)} */}
 		</>
 	);
 };
diff --git a/src/pages/Root/components/AppHeader/WalletMenu/WalletMenu.js b/src/pages/Root/components/AppHeader/WalletMenu/WalletMenu.js
index 04026c90..20589272 100644
--- a/src/pages/Root/components/AppHeader/WalletMenu/WalletMenu.js
+++ b/src/pages/Root/components/AppHeader/WalletMenu/WalletMenu.js
@@ -82,7 +82,7 @@ const WalletMenu = ({
 					</CardData>
 				</Card.Body>
 			</Card>
-			<Card>
+			{/* <Card>
 				<StyledCardHeader>
 					<StyledHeadingSmall>{t('header.wallet-menu.cards.synth-balance')}</StyledHeadingSmall>
 				</StyledCardHeader>
@@ -137,11 +137,11 @@ const WalletMenu = ({
 						]}
 					></StyledTable>
 				</StyleCardBody>
-			</Card>
+			</Card> */}
 			<Bottom>
-				<Link to={ROUTES.Assets.Home}>
+				{/* <Link to={ROUTES.Assets.Home}>
 					<StyledButton>{t('header.wallet-menu.buttons.wallet-overview')}</StyledButton>
-				</Link>
+				</Link> */}
 				<StyledButton onClick={logout}>{t('header.wallet-menu.buttons.log-out')}</StyledButton>
 			</Bottom>
 		</Content>
diff --git a/src/pages/Trade/components/ChartCard/Chart.tsx b/src/pages/Trade/components/ChartCard/Chart.tsx
index 72719e1d..404c8cbf 100644
--- a/src/pages/Trade/components/ChartCard/Chart.tsx
+++ b/src/pages/Trade/components/ChartCard/Chart.tsx
@@ -6,6 +6,7 @@ import format from 'date-fns/format';
 import { useTranslation } from 'react-i18next';
 import isNumber from 'lodash/isNumber';
 import find from 'lodash/find';
+import {default as colors} from 'styles/theme/colors';
 
 import RechartsResponsiveContainer from 'components/RechartsResponsiveContainer';
 
@@ -238,6 +239,7 @@ const ChartContainer = styled.div`
 	height: 250px;
 	display: flex;
 	justify-content: center;
+	background-color: ${colors.chartBackground};
 	align-items: center;
 	.recharts-yAxis .yAxis,
 	.recharts-xAxis .xAxis {
diff --git a/src/pages/Trade/components/ChartCard/PairListPanel/MarketsTable.tsx b/src/pages/Trade/components/ChartCard/PairListPanel/MarketsTable.tsx
index 6e5ac5f7..e3a6f0df 100644
--- a/src/pages/Trade/components/ChartCard/PairListPanel/MarketsTable.tsx
+++ b/src/pages/Trade/components/ChartCard/PairListPanel/MarketsTable.tsx
@@ -15,6 +15,7 @@ import { SynthDefinitionMap } from 'ducks/synths';
 
 import { SnowflakeCircle } from 'components/Icons';
 import Margin from 'components/Margin';
+import { SYNTHS_DISPLAY_NAMES } from 'constants/currency';
 
 type StateProps = {
 	synthsMap: SynthDefinitionMap;
@@ -43,7 +44,9 @@ const MarketsTable: FC<MarketsTableProps> = memo(({ synthsMap, markets, onTableR
 						<>
 							<Currency.Pair
 								baseCurrencyKey={cellProps.row.original.baseCurrencyKey}
+								baseCurrencyAsset={SYNTHS_DISPLAY_NAMES[cellProps.row.original.baseCurrencyKey]}
 								quoteCurrencyKey={cellProps.row.original.quoteCurrencyKey}
+								quoteCurrencyAsset={SYNTHS_DISPLAY_NAMES[cellProps.row.original.quoteCurrencyKey]}
 								showIcon={true}
 							/>
 							{synthsMap[cellProps.row.original.baseCurrencyKey]?.isFrozen ? (
diff --git a/src/pages/Trade/components/ChartCard/PairListPanel/PairListPanel.tsx b/src/pages/Trade/components/ChartCard/PairListPanel/PairListPanel.tsx
index 729ee533..46cb6dff 100644
--- a/src/pages/Trade/components/ChartCard/PairListPanel/PairListPanel.tsx
+++ b/src/pages/Trade/components/ChartCard/PairListPanel/PairListPanel.tsx
@@ -140,7 +140,9 @@ const PairListPanel: FC<PairListPanelProps> = ({
 				<DropdownPanelHeader>
 					<Currency.Pair
 						baseCurrencyKey={base.name}
+						baseCurrencyAsset={base.asset}
 						quoteCurrencyKey={quote.name}
+						quoteCurrencyAsset={quote.asset}
 						showIcon={true}
 					/>
 					<MenuArrowDownIcon className="arrow" />
diff --git a/src/pages/Trade/components/ChartCard/PairListPanel/SimpleSearch.tsx b/src/pages/Trade/components/ChartCard/PairListPanel/SimpleSearch.tsx
index 1e7aed77..29333dd5 100644
--- a/src/pages/Trade/components/ChartCard/PairListPanel/SimpleSearch.tsx
+++ b/src/pages/Trade/components/ChartCard/PairListPanel/SimpleSearch.tsx
@@ -2,7 +2,7 @@ import React, { FC } from 'react';
 import styled from 'styled-components';
 import { useTranslation } from 'react-i18next';
 
-import { SYNTHS_MAP, CurrencyKey, CurrencyKeys, CRYPTO_CURRENCY_MAP } from 'constants/currency';
+import { SYNTHS_MAP, CurrencyKey, CurrencyKeys, CryptoKey, CryptoKeys, CRYPTO_CURRENCY_MAP, CRYPTO_MAP, SYNTHS_DISPLAY_NAMES } from 'constants/currency';
 
 import { ReactComponent as CogIcon } from 'assets/images/cog.svg';
 
@@ -38,8 +38,8 @@ const SimpleSearch: FC<SimpleSearchProps> = ({
 				value={search}
 				onChange={onSearchChange}
 				placeholder={t('common.currency.try-currencyA-currencyB-or-currencyC-currencyD', {
-					currencyA: SYNTHS_MAP.sETH,
-					currencyB: SYNTHS_MAP.iBTC,
+					currencyA: CRYPTO_MAP.ETH,
+					currencyB: CRYPTO_MAP.BTC,
 					currencyC: CRYPTO_CURRENCY_MAP.LINK,
 					currencyD: CRYPTO_CURRENCY_MAP.ETH,
 				})}
@@ -51,7 +51,7 @@ const SimpleSearch: FC<SimpleSearchProps> = ({
 						isActive={asset === marketsAssetFilter}
 						onClick={(e) => onAssetFilterClick(e, asset)}
 					>
-						{asset}
+						{SYNTHS_DISPLAY_NAMES[asset]}
 					</StyledButton>
 				))}
 				<IconButton onClick={onAdvancedSearchClick}>
diff --git a/src/pages/Trade/components/CreateOrderCard/CreateOrderCard.js b/src/pages/Trade/components/CreateOrderCard/CreateOrderCard.js
index d00510ff..cd93c9a2 100644
--- a/src/pages/Trade/components/CreateOrderCard/CreateOrderCard.js
+++ b/src/pages/Trade/components/CreateOrderCard/CreateOrderCard.js
@@ -7,7 +7,6 @@ import isEmpty from 'lodash/isEmpty';
 import snxJSConnector from 'utils/snxJSConnector';
 
 import Card from 'components/Card';
-import NumericInputWithCurrency from 'components/Input/NumericInputWithCurrency';
 
 import { getWalletInfo } from 'ducks/wallet/walletDetails';
 import { getSynthsWalletBalances } from 'ducks/wallet/walletBalances';
@@ -21,8 +20,7 @@ import {
 	getTransactions,
 } from 'ducks/transaction';
 
-import { EMPTY_VALUE } from 'constants/placeholder';
-import { BALANCE_FRACTIONS } from 'constants/order';
+import { BALANCE_FRACTIONS, BUY } from 'constants/order';
 import { SYNTHS_MAP, CATEGORY_MAP } from 'constants/currency';
 import { TRANSACTION_STATUS } from 'constants/transaction';
 
@@ -40,10 +38,18 @@ import {
 import { HeadingSmall, DataSmall } from 'components/Typography';
 import { ButtonFilter, ButtonPrimary } from 'components/Button';
 import DismissableMessage from 'components/DismissableMessage';
-import { FormInputRow, FormInputLabel, FormInputLabelSmall } from 'shared/commonStyles';
 
 import { ReactComponent as ReverseArrow } from 'assets/images/reverse-arrow.svg';
 import NetworkInfo from '../../../../components/NetworkInfo/NetworkInfo';
+import LimitTypeTradeInputs from '../LimitTrade/LimitTypeTradeInputs';
+import StopLimitTypeTradeInputs from '../StopLimitTrade/StopLimitTypeTradeInputs';
+import MarketTypeTradeInputs from '../MarketTrade/MarketTypeTradeInputs';
+import TradeTypeTabs from '../TradeTypeTabs';
+import { MARKET, LIMIT, STOP_LIMIT } from 'constants/order';
+import { TRADE_TYPES } from 'constants/order';
+import MarketTypeTradeHeader from '../MarketTrade/MarketTypeTradeHeader';
+import LimitTypeTradeHeader from '../LimitTrade/LimitTypeTradeHeader';
+import StopLimitTypeTradeHeader from '../StopLimitTrade/StopLimitTypeTradeHeader';
 
 const INPUT_DEFAULT_VALUE = '';
 
@@ -75,6 +81,11 @@ const CreateOrderCard = ({
 	const [feeReclamationError, setFeeReclamationError] = useState(null);
 	const [isSubmitting, setIsSubmitting] = useState(false);
 	const [hasMarketClosed, setHasMarketClosed] = useState(false);
+	const [tradeType, setTradeType] = useState(MARKET);
+	const [limitPrice, setLimitPrice] = useState(INPUT_DEFAULT_VALUE);
+	const [stopLimit, setStopLimit] = useState(INPUT_DEFAULT_VALUE);
+	const [limitAmount, setLimitAmount] = useState(INPUT_DEFAULT_VALUE);
+	const [transactionType, setTransactionType] = useState(BUY);
 
 	const resetInputAmounts = () => {
 		setBaseAmount(INPUT_DEFAULT_VALUE);
@@ -291,83 +302,113 @@ const CreateOrderCard = ({
 		}
 	};
 
+	const handleTradeTypeChange = (event, newValue) => {
+		setTradeType(TRADE_TYPES[newValue]);
+	}
+
+	function commonProps() {
+		return {
+			quote: quote,
+			quoteAmount: quoteAmount,
+			isEmptyQuoteBalance: isEmptyQuoteBalance,
+			setMaxBalance: setMaxBalance,
+			quoteBalance: quoteBalance,
+			synthsWalletBalances: synthsWalletBalances,
+			setTradeAllBalance: setTradeAllBalance,
+			setQuoteAmount: setQuoteAmount,
+			setBaseAmount: setBaseAmount,
+			inputError: inputError,
+			base: base,
+			baseAmount: baseAmount,
+			baseBalance: baseBalance,
+			rate: rate,
+			inverseRate: inverseRate,
+			t: t,
+		};
+	}
+
+	const handleTransactionTypeChange = (transaction) => {
+		console.log(transaction)
+		setTransactionType(transaction);
+	}
+
+	const getTradeHeader = () => {
+		switch(tradeType){
+			case MARKET:
+				return (
+					<MarketTypeTradeHeader
+						setPair={setPair}
+						resetInputAmounts={resetInputAmounts}
+						t={t}
+						base={base}
+						quote={quote}
+					/>);
+			case LIMIT:
+				return (
+					<LimitTypeTradeHeader
+						transactionType={transactionType}
+						handleTransactionTypeChange={handleTransactionTypeChange}
+					/>);
+			case STOP_LIMIT:
+				return (
+					<StopLimitTypeTradeHeader
+						transactionType={transactionType}
+						handleTransactionTypeChange={handleTransactionTypeChange}
+					/>);
+			default:
+				return (<div/>);
+		}
+	}
+
+	const getTradeInputs = () => {
+		switch(tradeType){
+			case MARKET:
+				return (
+					<MarketTypeTradeInputs
+						{...commonProps()}
+						
+					/>);
+			case LIMIT:
+				return (
+					<LimitTypeTradeInputs
+						{...commonProps()}
+						limitPrice={limitPrice}
+						handleLimitChange={setLimitPrice}
+						limitAmount={limitAmount}
+						handleAmountChange={setLimitAmount}
+					/>);
+			case STOP_LIMIT:
+				return (
+					<StopLimitTypeTradeInputs
+						{...commonProps()}
+						limitPrice={limitPrice}
+						handleLimitChange={setLimitPrice}
+						limitAmount={limitAmount}
+						handleAmountChange={setLimitAmount}
+						stopLimit={stopLimit}
+						handleStopLimit={setStopLimit}
+					/>);
+			default:
+				return (<div/>);
+		}
+	}
+
 	return (
 		<Card>
 			<Card.Header>
 				<HeaderContainer>
-					<HeadingSmall>{t('trade.trade-card.title')}</HeadingSmall>
-					<ButtonFilter
-						onClick={() => {
-							setPair({ quote: base, base: quote });
-							resetInputAmounts();
-						}}
-						height={'22px'}
-					>
-						<ButtonFilterInner>
-							{t('trade.trade-card.reverse-button')}
-							<ReverseArrowStyled />
-						</ButtonFilterInner>
-					</ButtonFilter>
+					<TabsContainer>
+					<TradeTypeTabs value={tradeType} values={TRADE_TYPES} handleChange={handleTradeTypeChange}/>
+					</TabsContainer>
 				</HeaderContainer>
 			</Card.Header>
 			<Card.Body>
-				<FormInputRow>
-					<NumericInputWithCurrency
-						currencyKey={quote.name}
-						value={`${quoteAmount}`}
-						label={
-							<>
-								<FormInputLabel>{t('trade.trade-card.sell-input-label')}:</FormInputLabel>
-								<StyledFormInputLabelSmall
-									isInteractive={!isEmptyQuoteBalance}
-									onClick={setMaxBalance}
-								>
-									{t('common.wallet.balance-currency', {
-										balance: quoteBalance
-											? formatCurrency(quoteBalance.balance)
-											: !isEmpty(synthsWalletBalances)
-											? 0
-											: EMPTY_VALUE,
-									})}
-								</StyledFormInputLabelSmall>
-							</>
-						}
-						onChange={(_, value) => {
-							setTradeAllBalance(false);
-							setBaseAmount(value * rate);
-							setQuoteAmount(value);
-						}}
-						errorMessage={inputError}
-					/>
-				</FormInputRow>
-				<FormInputRow>
-					<NumericInputWithCurrency
-						currencyKey={base.name}
-						value={`${baseAmount}`}
-						label={
-							<>
-								<FormInputLabel>{t('trade.trade-card.buy-input-label')}:</FormInputLabel>
-								<StyledFormInputLabelSmall
-									isInteractive={!isEmptyQuoteBalance}
-									onClick={setMaxBalance}
-								>
-									{t('common.wallet.balance-currency', {
-										balance: baseBalance
-											? formatCurrency(baseBalance.balance)
-											: !isEmpty(synthsWalletBalances)
-											? 0
-											: EMPTY_VALUE,
-									})}
-								</StyledFormInputLabelSmall>
-							</>
-						}
-						onChange={(_, value) => {
-							setTradeAllBalance(false);
-							setQuoteAmount(value * inverseRate);
-							setBaseAmount(value);
-						}}
-					/>
-				</FormInputRow>
+				<div>
+					{getTradeHeader()}
+				</div>
+				<div style={{marginTop: '12px'}}>
+					{getTradeInputs()}
+				</div>
 				<BalanceFractionRow>
 					{BALANCE_FRACTIONS.map((fraction, id) => (
 						<ButtonAmount
@@ -391,8 +432,8 @@ const CreateOrderCard = ({
 					gasLimit={gasLimit}
 					ethRate={ethRate}
 					exchangeFeeRate={feeRate}
-					amount={baseAmount}
-					usdRate={getExchangeRatesForCurrencies(exchangeRates, base.name, SYNTHS_MAP.sUSD)}
+					amount={tradeType === MARKET ? baseAmount : limitAmount}
+					usdRate={tradeType === MARKET ? getExchangeRatesForCurrencies(exchangeRates, base.name, SYNTHS_MAP.sUSD) : limitPrice}
 				/>
 
 				{hasMarketClosed ? (
@@ -454,10 +495,6 @@ const ButtonAmount = styled.button`
 	height: 24px;
 `;
 
-const StyledFormInputLabelSmall = styled(FormInputLabelSmall)`
-	cursor: ${(props) => (props.isInteractive ? 'pointer' : 'default')};
-`;
-
 const HeaderContainer = styled.div`
 	width: 100%;
 	display: flex;
@@ -465,14 +502,8 @@ const HeaderContainer = styled.div`
 	align-items: center;
 `;
 
-const ButtonFilterInner = styled.div`
-	display: flex;
-	align-items: center;
-`;
-
-const ReverseArrowStyled = styled(ReverseArrow)`
-	height: 10px;
-	margin-left: 8px;
+const TabsContainer = styled.div`
+	margin-bottom: 7px;
 `;
 
 export const TxErrorMessage = styled(DismissableMessage)`
diff --git a/src/shared/translations/en.json b/src/shared/translations/en.json
index 7234581d..cecfb29b 100644
--- a/src/shared/translations/en.json
+++ b/src/shared/translations/en.json
@@ -428,9 +428,20 @@
 		"trade-card": {
 			"title": "Buy/Sell",
 			"reverse-button": "Reverse",
-			"sell-input-label": "Sell",
-			"buy-input-label": "Buy",
-			"confirm-trade-button": "Confirm trade",
+			"trade-type-market": {
+				"sell-input-label": "Sell",
+				"buy-input-label": "Buy"
+			},
+			"trade-type-limit": {
+				"price-input-label": "Price",
+				"amount-input-label": "Amount"
+			},
+			"trade-type-stop-limit": {
+				"stop-input-label": "stop",
+				"limit-input-label": "Limit",
+				"amount-input-label": "Amount"
+			},
+			"confirm-trade-button": "Place Order",
 			"frozen-synth": "Synth is frozen",
 			"retry-button": "Retry",
 			"network-info": {
diff --git a/src/styles/theme/colors.ts b/src/styles/theme/colors.ts
index a3e92d72..2d0f3378 100644
--- a/src/styles/theme/colors.ts
+++ b/src/styles/theme/colors.ts
@@ -1,4 +1,15 @@
 export default {
+	green: '#10BA97',
+	white: '#FFFFFF',
+	red: '#D94454',
+	hyperlink: '#8C9EFF',
+	buttonDefault: '#536DFE',
+	buttonHover: '#3D5AFE',
+	icons: '#304FFE',
+	chartBackground: '#0E0D14'
+};
+
+/* export default {
 	green: '#10BA97',
 	white: '#FFFFFF',
 	red: '#D94454',
@@ -6,4 +17,5 @@ export default {
 	buttonDefault: '#795DF5',
 	buttonHover: '#947BFF',
 	icons: '#5641F2',
-};
+	chartBackground: 'rgb(72,61,139, 0.2)'
+}; */
diff --git a/src/styles/theme/dark.ts b/src/styles/theme/dark.ts
index e4cdaed3..cdfd8d04 100644
--- a/src/styles/theme/dark.ts
+++ b/src/styles/theme/dark.ts
@@ -1,6 +1,18 @@
 import { ThemeColors } from './types';
 
 export const themeColors: ThemeColors = {
+	brand: '#FFFFFF',
+	surfaceL1: '#0E0D14',
+	surfaceL2: '#14131E',
+	surfaceL3: '#0e0d33',
+	accentL1: '#5c6bc0',
+	accentL2: '#303f9f',
+	fontPrimary: '#FFFFFF',
+	fontSecondary: '#CACAF1',
+	fontTertiary: '#8c9eff',
+}; 
+
+/* export const themeColors: ThemeColors = {
 	brand: '#FFFFFF',
 	surfaceL1: '#0E0D14',
 	surfaceL2: '#14131E',
@@ -11,5 +23,5 @@ export const themeColors: ThemeColors = {
 	fontSecondary: '#CACAF1',
 	fontTertiary: '#9492C4',
 };
-
+  */
 export default themeColors;
